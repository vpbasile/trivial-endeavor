{"version":3,"sources":["components/ErrorBoundary.js","components/GameSetup.tsx","components/AnswerButton.tsx","components/Question.tsx","components/helpers.tsx","components/DataDisplay.tsx","components/CategorySelect.tsx","components/PlayerColumn.tsx","components/Hyperink.tsx","App.tsx","index.tsx","svg/trivialEndeavorLogo0.svg"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","errorInfo","setState","react_default","a","createElement","style","whiteSpace","toString","componentStack","children","React","Component","GameSetup","removeButton","whatsHappening","setwhatsHappening","currentPlayerIndex","scoreState","setScoreState","phases","namefields","map","player","className","key","name","id","htmlFor","addButton","type","disabled","length","onClick","concat","toConsumableArray","index","correctCategories","wonPlace","slice","startButton","console","log","z","find","phase","title","currentPhase","AnswerButton","currentQuestion","undefined","guessedState","setGuessedState","categoryList","buttonIndex","buttonText","text","handleGuess","cssClass","cssClasses","questionCategoryTag","categoryTag","invertedColor","filter","category","queryTag","replace","buttonID","value","Question","devMode","neededToWin","setCurrentQuestion","vyingForPlace","questionText","choices","playerCount","questionCategory","tempCssClass","guess","currentPlayer","tempQuestionState","guessEntered","x","question","correctChoice","correctIndex","winCheck","playerIndex","temp","push","currenPlayerScore","updatedScore","JSON","stringify","SETvyingForPlace","nextPlayerIndex","current","i","thatPlayer","thatPlayerScore","nextPlayer","y","answerButtons","choice","classes","DataDisplay","toggleDevMode","role","defaultChecked","CategorySelect","newQuestion","categoryTitle","queryURL","tempQuestion","correctAnswer","_x","_getQuestion","apply","arguments","getQuestion","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","fetch","then","response","json","data","parseReceivedQuestion","catch","stop","incorrectAnswers","choicesCount","array","curId","randId","Math","floor","random","tmp","shuffleArray","answerIndex","pop","categoryName","categoryTemp","questionObject","method","headers","Content-Type","body","message","choiceCount","forEach","css","completeButtonCss","activeButtonCss","buttonKey","inactiveButtonCss","buttonGold","buttonSilver","buttonBronze","hasWon","includes","PlayerColumn","columnSize","Hyperlink","href","players","App","_useState","useState","_useState2","slicedToArray","setDevMode","_useState3","_useState4","blankQuestion","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","src","logo","alt","target","rel","ErrorBoundary_ErrorBoundary","ReactDOM","render","StrictMode","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.08f04556.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { error: null, errorInfo: null };\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\t// Catch errors in any components below and re-render with error message\r\n\t\tthis.setState({\r\n\t\t\terror: error,\r\n\t\t\terrorInfo: errorInfo\r\n\t\t})\r\n\t\t// You can also log error messages to an error reporting service here\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.errorInfo) {\r\n\t\t\t// Error path\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>An error occurred.</p>\r\n\t\t\t\t\t<details style={{ whiteSpace: 'pre-wrap' }}>\r\n\t\t\t\t\t\t{this.state.error && this.state.error.toString()}\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t{this.state.errorInfo.componentStack}\r\n\t\t\t\t\t</details>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\t// Normally, just render children\r\n\t\treturn this.props.children;\r\n\t}\r\n}","import React, {Dispatch} from 'react';\r\nimport { phaseDefinition, player, whatsHappening } from '../dataStructures';\r\n\r\nexport default function GameSetup(props: {\r\n\t// <><><> What's happening\r\n\twhatsHappening: whatsHappening, setwhatsHappening: Dispatch<whatsHappening>,\r\n\tscoreState: player[], setScoreState: Dispatch<player[]>,\r\n\t// <><><> Game Globals\r\n\tphases: phaseDefinition[],\r\n}) {\r\n\tconst whatsHappening = props.whatsHappening;\r\n\tconst setwhatsHappening = props.setwhatsHappening;\r\n\tconst currentPlayerIndex = whatsHappening.currentPlayerIndex;\r\n\tconst scoreState = props.scoreState;\r\n\tconst setScoreState = props.setScoreState;\r\n\tconst phases = props.phases;\r\n\r\n\tlet namefields = scoreState.map(player => {\r\n\t\treturn (\r\n\t\t\t<div className=\"form-group row\" key={player.name + \"namefield\"}>\r\n\t\t\t\t<div className={\"col-12 py-1 my-1\"} id=''>\r\n\t\t\t\t\t<label htmlFor={player.name + \"name\"}>{player.name}</label>\r\n\t\t\t\t\t{/* <input type=\"text\" className=\"form-control\" id={player.name + \"name\"} placeholder={player.name} onChange={(e) => { console.log(`${player.index}. ${e.target.value}`); />*/}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t});\r\n\r\n\tlet addButton =\r\n\t\t<button className={`rounded py-2 my-2 border btn cat-sport w-100`} type=\"button\" disabled={!(scoreState.length < 4)} onClick={() => setScoreState(\r\n\t\t\t// Add another player to the scoreState array\r\n\t\t\t[...scoreState, {\r\n\t\t\t\tindex: scoreState.length, name: \"Player \" + (scoreState.length + 1),\r\n\t\t\t\tcorrectCategories: [], wonPlace: 0\r\n\t\t\t}]\r\n\t\t)}>Add another team</button>\r\n\r\n\tlet removeButton\r\n\tremoveButton =\r\n\t\t<button className={`rounded py-2 my-2 border btn cat-geography w-100`} type=\"button\" disabled={scoreState.length === 1}\r\n\t\t\tonClick={() => setScoreState(\r\n\t\t\t\t// Remove the last player from the scoreState array\r\n\t\t\t\tscoreState.slice(0, scoreState.length - 1)\r\n\t\t\t)}>Remove a team</button>\r\n\r\n\tlet startButton =\r\n\t\t<button className={`rounded py-2 my-2 border btn btn-light w-100`} type=\"button\" onClick={() => {\r\n\t\t\tconsole.log(\"Begin game\");\r\n\t\t\tconst z = phases.find(phase => phase.title === \"Select\");\r\n\t\t\tif(z){setwhatsHappening({\r\n\t\t\t\t// FIXTHIS Neet to make this safer\r\n\t\t\t\tcurrentPhase: z,\r\n\t\t\t\tcurrentPlayerIndex: currentPlayerIndex\r\n\t\t\t});}\r\n\t\t}}>Begin Game</button>\r\n\r\n\tif (whatsHappening.currentPhase.title === \"Welcome\") {\r\n\t\treturn (<div className='row py-5 bg-dark bg-opacity-50'>\r\n\t\t\t<div id=\"playerList-div\" className=\"col-md-6 text-center\">\r\n\t\t\t\t<h2 id=\"display-category\">You can play with up to 4 teams.</h2>\r\n\t\t\t\t{namefields}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t{removeButton}\r\n\t\t\t\t{startButton}\r\n\t\t\t\t{addButton}\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</div>);\r\n\t} else return null;\r\n\r\n}","import React, { Dispatch } from \"react\";\r\nimport { player, category, questionInternal, whatsHappening } from \"../dataStructures\";\r\n\r\ntype AnswerButtonProps = {\r\n\tkey: number, index: number,\r\n\t// <><><> What's happening\r\n\twhatsHappening: whatsHappening,\r\n\tcurrentQuestion: questionInternal,\r\n\tscoreState: player[], setScoreState: Dispatch<player[]>,\r\n\tguessedState: boolean, setGuessedState: Dispatch<boolean>,\r\n\t// <><><> Game Globals\r\n\tcategoryList: category[],\r\n\t// <><><> Button-specific Globals\r\n\ttext: string,\r\n\tdisabled: boolean,\r\n\tcssClasses: string\r\n\thandleGuess: (buttonIndex:number, currentPlayerIndex:number, questionCategoryTag:string)=>void,\r\n}\r\n\r\nexport default function AnswerButton(props: AnswerButtonProps) {\r\n\t// <><><> What's happening\r\n\tconst whatsHappening = props.whatsHappening\r\n\tlet currentQuestion = props.currentQuestion\r\n\t// ====== If the question is null, the player has not selected a question yet\r\n\tif (currentQuestion === undefined) { return null; }\r\n\t// <><><> If we have a question, continue with \r\n\tconst guessedState = props.guessedState; const setGuessedState = props.setGuessedState;\r\n\t// <><><> Game Globals\r\n\tconst categoryList = props.categoryList;\r\n\t// <><><> Button-specific Globals\r\n\tlet buttonIndex = props.index;\r\n\tlet buttonText = props.text;\r\n\tconst handleGuess = props.handleGuess;\r\n\tlet cssClass = props.cssClasses;\r\n\t// <><><> Derivative values\r\n\tconst currentPlayerIndex = whatsHappening.currentPlayerIndex;\r\n\tconst questionCategoryTag = currentQuestion.categoryTag;\r\n\r\n\tconst questionCategory = categoryList.filter(category => category.queryTag === questionCategoryTag)[0];\r\n\tconst invertedColor = (questionCategory.cssClass).replace(\"cat-\", \"text-\");\r\n\tif (cssClass === undefined) { cssClass = `rounded py-2 my-2 border btn btn-dark w-100 ${invertedColor}` }\r\n\r\n\tconst buttonID = `choice-${buttonIndex}`;\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input className={cssClass} type=\"button\" value={buttonText} id={buttonID} disabled={guessedState} onClick={() => {\r\n\t\t\t\tsetGuessedState(true); handleGuess(buttonIndex, currentPlayerIndex, questionCategoryTag)\r\n\t\t\t}} />\r\n\t\t</div>\r\n\t);\r\n}","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { category, phaseDefinition, categoryTag, player, questionInternal, choices, whatsHappening, winners } from \"../dataStructures\";\r\nimport { nextPlayer } from './helpers'\r\nimport AnswerButton from './AnswerButton';\r\n\r\ntype QuestionProps = {\r\n\t// <><><> Dev mode stuff\t\r\n\tdevMode: boolean;\r\n\tneededToWin: number;\r\n\t// <><><> What's happening\r\n\twhatsHappening: whatsHappening; setwhatsHappening: Dispatch<whatsHappening>;\r\n\tcurrentQuestion: questionInternal; setCurrentQuestion: Dispatch<questionInternal>;\r\n\tquestionCategoryTag: string;\r\n\tscoreState: player[]; setScoreState: Dispatch<SetStateAction<player[]>>;\r\n\tguessedState: boolean; setGuessedState: Dispatch<boolean>;\r\n\t// <><><> Winning\r\n\tvyingForPlace: winners; SETvyingForPlace: Dispatch<winners>;\r\n\t// <><><> Game Globals\r\n\tcategoryList: category[];\r\n\tphases: phaseDefinition[];\r\n};\r\n\r\nexport default function Question(props: QuestionProps): JSX.Element | null {\r\n\r\n\t// <><><> Dev mode stuff\r\n\tconst devMode = props.devMode;\r\n\tconst neededToWin = props.neededToWin;\r\n\t// <><><> What's happening\r\n\tconst whatsHappening = props.whatsHappening;\r\n\tconst setwhatsHappening = props.setwhatsHappening;\r\n\t// ====== Pause to check if we need to render\r\n\tif (!devMode && (whatsHappening.currentPhase.title === \"Welcome\")) { return null; }\r\n\t// <><><> Continue with the What's happening\r\n\tlet currentQuestion = props.currentQuestion\r\n\tlet setCurrentQuestion = props.setCurrentQuestion;\r\n\tconst questionCategoryTag = currentQuestion.categoryTag;\r\n\tconst scoreState = props.scoreState; const setScoreState = props.setScoreState;\r\n\tconst guessedState = props.guessedState; const setGuessedState = props.setGuessedState;\r\n\t// <><><> Winning\r\n\tconst vyingForPlace = props.vyingForPlace;\r\n\t// <><><> Game Globals\r\n\tconst categoryList = props.categoryList;\r\n\tconst phases = props.phases;\r\n\t// <><><> Question Globals\r\n\tconst questionText = currentQuestion.questionText;\r\n\tconst choices: choices = currentQuestion.choices;\r\n\r\n\t// <><><> Derivative values\r\n\tlet playerCount = scoreState.length; // THis should be a const, maybe FIXTHIS\r\n\tconst questionCategory = categoryList.filter(category => category.queryTag === questionCategoryTag)[0];\r\n\tlet tempCssClass = questionCategory.cssClass;\r\n\r\n\tfunction handleGuess(guess: number, currentPlayerIndex: number, questionCategoryTag: string): void {\r\n\t\tconst currentPlayer = scoreState[currentPlayerIndex];\r\n\t\tconsole.log(`${currentPlayer.name} guesses ${guess}`);\r\n\t\tlet tempQuestionState = currentQuestion\r\n\t\ttempQuestionState.guessEntered = guess\r\n\t\tsetCurrentQuestion(tempQuestionState)\r\n\t\tlet x = phases.find(phase => phase.title === \"Answer\")\r\n\t\t// FIXTHIS Neet to make this safer\r\n\t\tif (x) {\r\n\t\t\tsetwhatsHappening({\r\n\t\t\t\tcurrentPhase: x,\r\n\t\t\t\tcurrentPlayerIndex: currentPlayerIndex\r\n\t\t\t})\r\n\t\t}\r\n\t\tlet question = props.currentQuestion;\r\n\t\tlet correctChoice = question.correctIndex;\r\n\t\tif (guess === correctChoice) {\r\n\t\t\t// If the player guessed correctly, add questionCategoryTag to the player's score\r\n\t\t\tconsole.log(`Correct! ${currentPlayer.name} has completed the ${questionCategory.title} category`);\r\n\t\t\tlet winCheck = updatedScore(currentPlayerIndex, questionCategoryTag);\r\n\t\t\tconsole.log(`${currentPlayer.name}'s score: ${JSON.stringify(winCheck)}/${neededToWin}`);\r\n\t\t\t// let tempWinners = Array.from(winners);\r\n\t\t\tif (winCheck >= neededToWin) {\r\n\t\t\t\tconsole.log(`${scoreState[currentPlayerIndex].name} has gotten enough points!`)\r\n\t\t\t\tscoreState[currentPlayerIndex].wonPlace = vyingForPlace;\r\n\t\t\t\tprops.SETvyingForPlace(vyingForPlace + 1)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// If the player was incorrect\r\n\t\t\tconsole.log(`Incorrect!  The correct answer was: ${correctChoice} ${question.choices[correctChoice]}`);\r\n\t\t}\r\n\t\t// Now that feedback has been given, move to the next player\r\n\t\tlet nextPlayerIndex = nextPlayer(currentPlayerIndex, playerCount, neededToWin, scoreState);\r\n\t\t// Every time i use this find, I should be using a map instead\r\n\t\tconst y = props.phases.find(phase => phase.title === \"Select\");\r\n\t\t// Update the game state\r\n\t\tif (y) {\r\n\t\t\t// FIXTHIS Neet to make this safer\r\n\t\t\tsetwhatsHappening({\r\n\t\t\t\tcurrentPhase: y,\r\n\t\t\t\tcurrentPlayerIndex: nextPlayerIndex\r\n\t\t\t})\r\n\t\t}\r\n\t\tconsole.log(`===== <> Now it is ${scoreState[nextPlayerIndex].name}'s turn <> =====`);\r\n\t}\r\n\r\n\tfunction updatedScore(playerIndex: number, categoryTag: categoryTag) {\r\n\t\tlet temp = scoreState;\r\n\t\ttemp[playerIndex].correctCategories.push(categoryTag);\r\n\t\tconst currenPlayerScore = temp[playerIndex].correctCategories.length;\r\n\r\n\t\tsetScoreState(temp);\r\n\t\treturn currenPlayerScore;\r\n\t}\r\n\r\n\t// Make answer buttons\r\n\tlet buttonIndex = 0;\r\n\r\n\tconst answerButtons = choices.map((choice) => {\r\n\t\t// Generic gray button class\r\n\t\tlet classes = \" text-wrap rounded py-2 my-2 border w-100 btn\"\r\n\t\t// If the choice is null, return a disabled button and exit\r\n\t\t// console.log(`Choice: ${choice}`);\r\n\t\tif (choice === null) {\r\n\t\t\t// console.log(\"Choice is null\");\r\n\t\t\treturn (<AnswerButton\r\n\t\t\t\tcategoryList={categoryList}\r\n\t\t\t\tguessedState={guessedState} setGuessedState={setGuessedState}\r\n\t\t\t\tkey={buttonIndex}\r\n\t\t\t\tindex={buttonIndex++}\r\n\t\t\t\ttext=\"Please select a category\"\r\n\t\t\t\tdisabled={true}\r\n\t\t\t\tcssClasses={classes}\r\n\t\t\t\tscoreState={scoreState} setScoreState={setScoreState}\r\n\t\t\t\tcurrentQuestion={currentQuestion}\r\n\t\t\t\thandleGuess={handleGuess}\r\n\t\t\t\twhatsHappening={whatsHappening} />)\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// If the guess has been entered\r\n\t\t\tif (props.guessedState) {\r\n\t\t\t\t// set the classes to show which button was correct\r\n\t\t\t\tif (buttonIndex === currentQuestion.correctIndex) {\r\n\t\t\t\t\tclasses += \" btn-success\";\r\n\t\t\t\t} else if (buttonIndex === currentQuestion.guessEntered) {\r\n\t\t\t\t\t// The guess was wrong so turn the button red\r\n\t\t\t\t\tclasses += \" btn-danger\";\r\n\t\t\t\t} else { classes += \" btn-dark\"; }\r\n\t\t\t\t// Guess has not been entered, so all buttons get the same class\r\n\t\t\t} else { classes += \" btn-dark\"; }\r\n\t\t\treturn (\r\n\t\t\t\t<AnswerButton\r\n\t\t\t\t\tcategoryList={categoryList}\r\n\t\t\t\t\tscoreState={scoreState} setScoreState={setScoreState}\r\n\t\t\t\t\twhatsHappening={whatsHappening}\r\n\t\t\t\t\tguessedState={guessedState} setGuessedState={setGuessedState}\r\n\t\t\t\t\tkey={buttonIndex}\r\n\t\t\t\t\tindex={buttonIndex++}\r\n\t\t\t\t\ttext={choice}\r\n\t\t\t\t\tdisabled={(currentQuestion.guessEntered === null)}\r\n\t\t\t\t\tcssClasses={classes}\r\n\t\t\t\t\tcurrentQuestion={currentQuestion} handleGuess={handleGuess} />\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n\r\n\t// Handle hiding and showing the question\r\n\tlet questionClasses = \"card bg-dark mb-3\";\r\n\t// CSS for the category header\r\n\tif (tempCssClass === undefined) { tempCssClass = \"blackandwhite\"; }\r\n\ttempCssClass = `py-2 my-2 btn w-100 ${tempCssClass}`;\r\n\treturn (\r\n\t\t<div className={questionClasses}>\r\n\t\t\t<div id=\"collapse-card\" className=\"card-body\">\r\n\t\t\t\t<h2 id=\"display-category\" className={tempCssClass}>\r\n\t\t\t\t\t{questionCategory.title}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<p className=\"card-text btn btn-dark w-100\" id=\"display-question\">{questionText}</p>\r\n\t\t\t\t{answerButtons}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}","export function nextPlayer(current: number, playerCount: number, neededToWin:number, scoreState: any[]): number {\r\n\t// let foundPlayer = null;\r\n\tconsole.log(`Finding next player`)\r\n\tfor (let i = 1; i < playerCount; i++) {\r\n\t\tlet nextPlayerIndex = (current + i) % playerCount;\r\n\t\tconst thatPlayer = scoreState[nextPlayerIndex];\r\n\t\tconst thatPlayerScore = (thatPlayer.correctCategories).length;\r\n\t\tconsole.log(`Should ${thatPlayer.name} be next?  Their score is ${thatPlayerScore}/${neededToWin}`);\r\n\t\tif (thatPlayerScore < neededToWin) {\r\n\t\t\tconsole.log(`${thatPlayer.name} is next.`)\r\n\t\t\treturn nextPlayerIndex;\r\n\t\t}\r\n\t}\r\n\treturn (current + 1) % playerCount;\r\n\r\n}","import React from \"react\";\r\nimport { player, whatsHappening } from \"../dataStructures\"\r\n\r\ntype DataDisplayProps = {\r\n\t// <><><> Dev mode stuff\r\n\tdevMode: boolean, toggleDevMode: () => void,\r\n\t// <><><> What's happening\r\n\twhatsHappening: whatsHappening,\r\n\tscoreState: player[],\r\n\t// <><><> Derivative values\r\n\tplayers: player[],\r\n\t// <><> Children\r\n\tchildren?: any\r\n}\r\n\r\nexport default function DataDisplay(props: DataDisplayProps) {\r\n\t// <><><> Dev mode stuff\r\n\tconst devMode = props.devMode; const toggleDevMode = props.toggleDevMode\r\n\t// <><><> What's happening\r\n\tconst whatsHappening = props.whatsHappening;\r\n\tconst scoreState = props.scoreState;\r\n\r\n\t// <><><> Derivative values\r\n\tconst currentPlayerIndex = whatsHappening.currentPlayerIndex;\r\n\tconst currentPlayer = scoreState[currentPlayerIndex];\r\n\r\n\treturn (<div className=\"\">\r\n\t\t<div className=\"form-check form-switch\">\r\n\t\t\t<input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" defaultChecked={devMode} onClick={toggleDevMode} />\r\n\t\t\t<label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n\t\t\t\t{devMode ? \"Development Mode: On\" : \"Development Mode: Off\"}\r\n\t\t\t</label>\r\n\t\t\t{/* {If devMode is on, then return the text} */}\r\n\t\t\t{devMode ? (<div>\r\n\t\t\t\t<h3>Player: {currentPlayer.name}</h3>\r\n\t\t\t\t<h3>Phase: {whatsHappening.currentPhase.title}</h3>\r\n\t\t\t\t<p>Choosing a category with development mode on will hide the values of the answer choices and will instead display which is the correct choice.</p>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>) : null}\r\n\t\t</div>\r\n\t</div>)\r\n}","// API info:\r\n// https://trivia.willfry.co.uk/\r\n\r\n// https://api.trivia.willfry.co.uk/questions?categories=food_and_drink,geography,general_knowledge,history,literature,movies,music,science,society_and_culture,sport_and_leisure&limit=1\r\n\r\nimport React, { Dispatch } from \"react\";\r\nimport { category, choices, phaseDefinition, player, questionInternal, whatsHappening, winners } from \"../dataStructures\";\r\n\r\ntype CategorySelectProps = {\r\n\tkey: string,\r\n\t// <><><> Dev mode stuff\r\n\tdevMode: boolean\r\n\t// <><><> What's happening\r\n\twhatsHappening: whatsHappening, setwhatsHappening: Dispatch<whatsHappening>,\r\n\tcurrentQuestion: questionInternal, setCurrentQuestion: Dispatch<questionInternal>,\r\n\tscoreState: player[],\r\n\tguessedState: boolean, setGuessedState: Dispatch<boolean>,\r\n\t// <><><> Winning\r\n\tvyingForPlace: winners;\r\n\t// <><><> Game Globals\r\n\tcategoryList: category[],\r\n\tphases: phaseDefinition[],\r\n\t// <><><> Player and category we're iterating on \r\n\tcategory: category,\r\n\tplayer: player,\r\n\t// <><><> Derivative values\r\n}\r\n\r\nexport default function CategorySelect(props: CategorySelectProps) {\r\n\t// <><><> Dev mode stuff\r\n\tconst devMode = props.devMode;\r\n\t// <><><> What's happening\r\n\tconst whatsHappening = props.whatsHappening, setwhatsHappening = props.setwhatsHappening;\r\n\tconst setCurrentQuestion = props.setCurrentQuestion;\r\n\tconst setGuessedState = props.setGuessedState;\r\n\t// <><><> Winning\r\n\tconst vyingForPlace = props.vyingForPlace;\r\n\t// <><><> Game Globals\r\n\tconst categoryList = props.categoryList;\r\n\tconst phases = props.phases;\r\n\t// <><><> Question Globals\r\n\t// <><><> Player and category we're iterating on \r\n\tconst player = props.player;\r\n\tconst category = props.category;\r\n\t// <><><> Derivative values\r\n\tconst cssClass: string = category.cssClass + \" w-100  text-wrap\";\r\n\r\n\tfunction newQuestion(currentPlayerIndex: number, category: category) {\r\n\t\tconst temp = phases.find((phase: { title: string; }) => phase.title === \"Answer\");\r\n\t\t// FIXTHIS Need to error handle\r\n\t\tif (temp) {\r\n\t\t\tsetwhatsHappening({\r\n\t\t\t\tcurrentPhase: temp,\r\n\t\t\t\tcurrentPlayerIndex: currentPlayerIndex\r\n\t\t\t})\r\n\t\t}\r\n\t\t// console.log(`Freshly set game phase:`)\r\n\t\t// console.log(`whatsHappening: ${JSON.stringify(whatsHappening)}`);\r\n\t\tconst categoryTitle = category.title\r\n\t\tconsole.log(`${player.name} requests a ${categoryTitle} question`);\r\n\t\t// <> Old formats of the API request:\r\n\t\t// let queryURL = `https://api.trivia.willfry.co.uk/questions?categories=${category.queryTag}&limit=1`\r\n\t\t// let queryURL = `https://the-trivia-api.com/questions?categories=food_and_drink&limit=1`\r\n\t\tlet queryURL = `https://the-trivia-api.com/api/questions?categories=${category.queryTag}&limit=1`;\r\n\t\t// Create a temporary question while we wait for the API to respond\r\n\t\tconst tempQuestion: questionInternal = {\r\n\t\t\tcategoryTag: category.queryTag,\r\n\t\t\tquestionText: \"Loading...\",\r\n\t\t\tchoices: [\"Loading...\", \"Loading...\", \"Loading...\", \"Loading...\"],\r\n\t\t\tcorrectAnswer: \"Loading...\",\r\n\t\t\tcorrectIndex: 0,\r\n\t\t\tguessEntered: 0\r\n\t\t}\r\n\t\tsetGuessedState(false);\r\n\t\tsetCurrentQuestion(tempQuestion);\r\n\t\tgetQuestion(queryURL);\r\n\t}\r\n\tasync function getQuestion(url: RequestInfo | URL) {\r\n\t\t// If we're in devMode, we'll use the local copy of the API\r\n\t\t// if (devMode) { parseReceivedQuestion(spoofQuestion) }\r\n\t\t// else {\r\n\t\t// Query the API for a new question and parse it\t\r\n\t\tfetch(url).then(response => response.json())\r\n\t\t\t.then(data => { parseReceivedQuestion(data[0]) })\r\n\t\t\t.catch(error => { console.log(error); });\r\n\t\t// }\r\n\t}\r\n\r\n\ttype questionFromAPI = {\r\n\t\tcorrectAnswer: string;\r\n\t\tincorrectAnswers: string[];\r\n\t\tcategory: string;\r\n\t\tquestion: string;\r\n\t}\r\n\r\n\tfunction parseReceivedQuestion(data: questionFromAPI) {\r\n\t\tconsole.log(`Parsing question`);\r\n\t\t// <> Parse the received question into the game's data structure\r\n\t\t// Make sure we don't have more than 4 incorrect answers\r\n\t\tlet incorrectAnswers: string[] = data.incorrectAnswers.slice(0, 4);\r\n\t\tconst choicesCount = incorrectAnswers.length + 1\r\n\t\tshuffleArray(incorrectAnswers);\r\n\t\tconst answerIndex = Math.floor(Math.random() * (choicesCount));\r\n\t\tlet choices: choices = [\"\", \"\", \"\", \"\"]\r\n\t\tchoices[answerIndex] = data.correctAnswer;\r\n\t\tfor (let i = 0; i < choicesCount; i++) {\r\n\t\t\tif (i === answerIndex) { choices[i] = data.correctAnswer; }\r\n\t\t\telse {\r\n\t\t\t\tlet x = incorrectAnswers.pop()\r\n\t\t\t\tif (x !== undefined) { choices[i] = x; }\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst categoryName: string = data.category;\r\n\t\t// This is where we get the category object from the list\r\n\t\tconst category: category[] = categoryList.filter((categoryTemp) => {\r\n\t\t\treturn categoryTemp.title === categoryName;\r\n\t\t});\r\n\r\n\t\tconst categoryTag: string = category[0].queryTag;\r\n\r\n\t\tlet questionObject: questionInternal = {\r\n\t\t\tquestionText: data.question,\r\n\t\t\tchoices: choices,\r\n\t\t\tcorrectAnswer: data.correctAnswer,\r\n\t\t\tcorrectIndex: answerIndex,\r\n\t\t\tcategoryTag: categoryTag,\r\n\t\t\tguessEntered: 0\r\n\t\t}\r\n\t\t// Send the question to the database to be saved\r\n\t\tconsole.log(`Attempting to save question`)\r\n\t\ttry {\r\n\t\t\tfetch(\"http://localhost:8000/trivia/save/\", {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(questionObject),\r\n\t\t\t});\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.log(\"Error encountered.\")\r\n\t\t\tconsole.error(error.message);\r\n\t\t}\r\n\t\tif (devMode) {\r\n\t\t\t// Hide the answer data so I don't learn anything while I'm debugging\r\n\t\t\tconsole.log(`=====Hiding answers=====`);\r\n\t\t\tlet choiceCount = 0;\r\n\t\t\tchoices.forEach(() => {\r\n\t\t\t\tif (choiceCount === questionObject.correctIndex) questionObject.choices[choiceCount] = \"Correct answer\"\r\n\t\t\t\telse questionObject.choices[choiceCount] = \"Incorrect answer\"\r\n\t\t\t\tchoiceCount++;\r\n\t\t\t})\r\n\t\t}\r\n\t\t// Update the game state with the new question\r\n\t\tsetCurrentQuestion(questionObject);\r\n\t}\r\n\r\n\tfunction shuffleArray(array: string[]): string[] {\r\n\t\tlet curId: number = array.length;\r\n\t\t// There remain elements to shuffle\r\n\t\twhile (0 !== curId) {\r\n\t\t\t// Pick a remaining element\r\n\t\t\tlet randId = Math.floor(Math.random() * curId);\r\n\t\t\tcurId -= 1;\r\n\t\t\t// Swap it with the current element.\r\n\t\t\tlet tmp = array[curId];\r\n\t\t\tarray[curId] = array[randId];\r\n\t\t\tarray[randId] = tmp;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tconst completeString = \"\\u2713\" // Checkmark\r\n\t// CSS common to all three types of buttons\r\n\tconst css = \"btn btn-lg btn-block  text-wrap my-1\";\r\n\t// Complete category for any player\r\n\tconst completeButtonCss = `${css} ${cssClass}`\r\n\t// Current player, not complete\r\n\tconst activeButtonCss = `${css} ${cssClass}`\r\n\t// Other player, not complete\r\n\tconst buttonKey = player.name + '_' + category.queryTag;\r\n\tconst inactiveButtonCss = `${css} btn-dark ${cssClass.replace(\"cat-\", \"text-\")}`\r\n\tconst buttonGold = <input key={buttonKey} className={`${css} gold bg-gradient w-100`} type=\"button\" value={\"1st place!\"} disabled={true} />\r\n\tconst buttonSilver = <input key={buttonKey} className={`${css} silver bg-gradient w-100`} type=\"button\" value={\"2nd place!\"} disabled={true} />\r\n\tconst buttonBronze = <input key={buttonKey} className={`${css} bronze bg-gradient w-100`} type=\"button\" value={\"3rd place!\"} disabled={true} />\r\n\r\n\t// <> Build the button\r\n\t// During the welcome phase, all buttons should be disabled\r\n\tif (whatsHappening.currentPhase.title === \"Welcome\") {\r\n\t\treturn (<input key={buttonKey}\r\n\t\t\tclassName={inactiveButtonCss} type=\"button\" value={category.title} disabled={true} />\r\n\t\t)\r\n\t}\r\n\t// If the player is a winner, the button should be gold.\r\n\tconst hasWon = player.wonPlace;\r\n\tif (hasWon) {\r\n\t\tswitch (hasWon) {\r\n\t\t\tcase 1: return (buttonGold);\r\n\t\t\tcase 2: return (buttonSilver);\r\n\t\t\tcase 3: return (buttonBronze);\r\n\t\t}\r\n\t}\r\n\t// If the player has already completed this category, show the category as completed, regardless of whether it that player's turn or not\r\n\tif (player.correctCategories.includes(category.queryTag)) {\r\n\t\treturn (<input key={buttonKey} className={completeButtonCss} type=\"button\" value={completeString} disabled={true} />);\r\n\t}\r\n\t// If it's the current player's turn, show the button\r\n\tif (player.index === whatsHappening.currentPlayerIndex) {\r\n\t\treturn (<input className={activeButtonCss} type=\"button\" value={category.title} onClick={() => newQuestion(player.index, category)\r\n\t\t} />\r\n\t\t);\r\n\t}\r\n\t// // Else (it is not the current player's turn and they have not completed this category), show the category as not completed\r\n\treturn (<input key={buttonKey} className={inactiveButtonCss} type=\"button\" value={category.title} disabled={true} />);\r\n}","import React, { Dispatch } from 'react';\r\nimport { category, phaseDefinition, player, questionInternal, whatsHappening, winners } from '../dataStructures';\r\nimport CategorySelect from './CategorySelect';\r\n\r\ntype PlayerColumnProps = {\r\n\t// <><><> Dev mode stuff\r\n\tdevMode: boolean;\r\n\t// <><><> What's happening\r\n\twhatsHappening: whatsHappening; setwhatsHappening: Dispatch<whatsHappening>,\r\n\tcurrentQuestion: questionInternal; setCurrentQuestion: Dispatch<questionInternal>;\r\n\tscoreState: player[]\r\n\tguessedState: boolean; setGuessedState: Dispatch<boolean>;\r\n\t// <><><> Winning\r\n\tvyingForPlace: winners, SETvyingForPlace: Dispatch<winners>;\r\n\t// <><><> Game Globals\r\n\tcategoryList: category[],\r\n\tphases: phaseDefinition[],\r\n\t// <><><> Question Globals\r\n\tplayer: player,\r\n\t// <><><> Derivative values\r\n}\r\n\r\nexport default function PlayerColumn(props: PlayerColumnProps) {\r\n\t// <><><> Dev mode stuff\r\n\tconst devMode = props.devMode;\r\n\t// <><><> What's happening\r\n\tconst whatsHappening = props.whatsHappening; const setwhatsHappening = props.setwhatsHappening;\r\n\tconst currentQuestion = props.currentQuestion; const setCurrentQuestion = props.setCurrentQuestion;\r\n\tconst scoreState = props.scoreState;\r\n\tconst guessedState = props.guessedState; const setGuessedState = props.setGuessedState;\r\n\t// <><><> Winning\r\n\tconst vyingForPlace = props.vyingForPlace; const SETvyingForPlace = props.SETvyingForPlace;\r\n\t// <><><> Game Globals\r\n\tconst categoryList = props.categoryList;\r\n\tconst phases = props.phases;\r\n\t// <><><> Question Globals\r\n\tconst player = props.player;\r\n\t// <><><> Derivative values\r\n\tconst playerCount = scoreState.length;\r\n\tconst columnSize = 12 / playerCount;\r\n\r\n\treturn (\r\n\t\t<div className={\"col-lg-\" + columnSize + \" py-2 my-2 bg-dark bg-opacity-50\"} id=''>\r\n\t\t\t<input className=\"w-100 text-wrap py-1 my-1 playerBadge\" type=\"button\" value={player.name} disabled={true} />\r\n\t\t\t{categoryList.map(category => {\r\n\t\t\t\tif (category.queryTag !== \"none\") {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<CategorySelect\r\n\t\t\t\t\t\t\tkey={category.key}\r\n\t\t\t\t\t\t\t// <><><> Dev mode stuff\r\n\t\t\t\t\t\t\tdevMode={devMode}\r\n\t\t\t\t\t\t\t// <><><> What's happening\r\n\t\t\t\t\t\t\twhatsHappening={whatsHappening} setwhatsHappening={setwhatsHappening}\r\n\t\t\t\t\t\t\tcurrentQuestion={currentQuestion} setCurrentQuestion={setCurrentQuestion}\r\n\t\t\t\t\t\t\tscoreState={scoreState}\r\n\t\t\t\t\t\t\tguessedState={guessedState} setGuessedState={setGuessedState}\r\n\t\t\t\t\t\t\t// <><><> Winning\r\n\t\t\t\t\t\t\tvyingForPlace={vyingForPlace}\r\n\t\t\t\t\t\t\t// <><><> Game Globals\r\n\t\t\t\t\t\t\tcategoryList={categoryList}\r\n\t\t\t\t\t\t\tphases={phases}\r\n\t\t\t\t\t\t\t// <><><> Question Globals\r\n\t\t\t\t\t\t\t// <><><> Player and category we're iterating on \r\n\t\t\t\t\t\t\tcategory={category}\r\n\t\t\t\t\t\t\tplayer={player}\r\n\r\n\t\t\t\t\t\t// <><><> Derivative values\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t} else { return null; }\r\n\t\t\t}\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Hyperlink(props: {url:string, text:string}) {\r\n\treturn (\r\n\t\t<div className='col-6'>\r\n\t\t\t<a href={props.url}>{props.text}</a>\r\n\t\t</div>\r\n\t);\r\n}","import React, { useState } from \"react\";\r\nimport logo from \"./svg/trivialEndeavorLogo0.svg\";\r\n\r\n// Import my utility modules and data structures\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport { category, player, whatsHappening, questionInternal, phaseDefinition, winners } from './dataStructures';\r\n\r\n// <> Import my modules\r\nimport GameSetup from './components/GameSetup';\r\nimport Question from \"./components/Question\";\r\nimport DataDisplay from './components/DataDisplay';\r\nimport PlayerColumn from './components/PlayerColumn';\r\nimport Hyperlink from './components/Hyperink';\r\n\r\nlet players: player[] = [\r\n  { index: 0, name: \"Player 1\", correctCategories: [], wonPlace: 0 }\r\n]\r\n\r\ntype AppProps = { categoryList: category[], neededToWin: number, phases: phaseDefinition[] }\r\n\r\nexport default function App(props: AppProps): JSX.Element {\r\n\r\n  // <><><> Game Globals\r\n  const categoryList = props.categoryList;\r\n  const phases = props.phases;\r\n  // <><><> Dev mode stuff\r\n  const [devMode, setDevMode] = useState(false);\r\n  function toggleDevMode() {\r\n    setDevMode(!devMode)\r\n    devMode ? console.log(\"Dev mode off\") : console.log(\"Dev mode on\")\r\n  }\r\n  function neededToWin(devMode: boolean): number {\r\n    if (devMode) { return 2 }\r\n    else { return props.neededToWin; }\r\n  }\r\n  // <><><> What's happening\r\n  const [whatsHappening, setwhatsHappening] = useState<whatsHappening>({ currentPhase: phases[0], currentPlayerIndex: 0 });\r\n  const blankQuestion: questionInternal = { questionText: null, choices: [\"\", \"\", \"\", \"\"], correctAnswer: null, correctIndex: 0, categoryTag: categoryList[0].queryTag, guessEntered: 0 };\r\n  const [currentQuestion, setCurrentQuestion] = useState<questionInternal>(blankQuestion);\r\n  // <><><> Winning\r\n  const [vyingForPlace, SETvyingForPlace] = useState<winners>(1);\r\n  // <> Create the states for the game\r\n  const [guessedState, setGuessedState] = useState(false);\r\n  const [scoreState, setScoreState] = useState<player[]>(players);\r\n\r\n  return (<div className=\"App container\" >\r\n    <div id=\"logo-row\" className=\"row\" >\r\n      <div className=\"col-12 text-center\" >\r\n        <img src={logo} className=\"App-logo w-75 py-5\" alt=\"Trivial Endeavor logo\" />\r\n        <p className=\"fancy-font\">by <a href=\"https://www.schmincenzo.com\" target=\"_blank\" rel=\"noopener noreferrer\">Schmincenzo</a></p>\r\n      </div>\r\n    </div>\r\n    <div id=\"gameBoard-row\" className=\"row\" >\r\n      <ErrorBoundary>\r\n        <div className=\"col-12\" >\r\n          <Question key={\"currentQuestion\"}\r\n            // <><><> Dev mode stuff\r\n            devMode={devMode}\r\n            neededToWin={neededToWin(devMode)}\r\n            // <><><> What's happening\r\n            whatsHappening={whatsHappening} setwhatsHappening={setwhatsHappening}\r\n            currentQuestion={currentQuestion} setCurrentQuestion={setCurrentQuestion}\r\n            questionCategoryTag={currentQuestion.categoryTag}\r\n            scoreState={scoreState} setScoreState={setScoreState}\r\n            guessedState={guessedState} setGuessedState={setGuessedState}\r\n            // <><><> Winning\r\n            vyingForPlace={vyingForPlace} SETvyingForPlace={SETvyingForPlace}\r\n            // <><><> Game Globals\r\n            categoryList={categoryList}\r\n            phases={phases}\r\n          />\r\n          <GameSetup\r\n            // <><><> What's happening\r\n            whatsHappening={whatsHappening} setwhatsHappening={setwhatsHappening}\r\n            scoreState={scoreState} setScoreState={setScoreState}\r\n\r\n            // <><><> Game Globals\r\n            phases={phases}\r\n          />\r\n        </div>\r\n      </ErrorBoundary>\r\n    </div>\r\n    <div id=\"scoreboard-row\" className=\"row\" >\r\n      <ErrorBoundary>\r\n        {\r\n          scoreState.map((player, index) => (\r\n            <PlayerColumn\r\n              key={player.name + \"playerColumn\"}\r\n              player={player}\r\n              categoryList={categoryList}\r\n              scoreState={scoreState}\r\n              phases={phases}\r\n              whatsHappening={whatsHappening} setwhatsHappening={setwhatsHappening}\r\n              vyingForPlace={vyingForPlace} SETvyingForPlace={SETvyingForPlace}\r\n              currentQuestion={currentQuestion} setCurrentQuestion={setCurrentQuestion}\r\n              guessedState={guessedState} setGuessedState={setGuessedState}\r\n              devMode={devMode} />))\r\n        }\r\n      </ErrorBoundary>\r\n    </div>\r\n    <div id=\"footer-row\" className=\"row\">\r\n      < div id='credits-col' className=\"col-12 border border-1 p-3 mt-5\">\r\n        <h3>Version 1.4</h3>\r\n        <Hyperlink url=\"https://vpbasile.github.io/trivial-endeavor\" text=\"Live version\" />\r\n        <Hyperlink url=\"https://github.com/vpbasile/trivial-endeavor\" text=\"Repository on GitHub\" />\r\n        <Hyperlink url=\"https://the-trivia-api.com/\" text=\"The Trivia API by Will Fry\" />\r\n      </div>\r\n      <div id=\"dev-col\" className=\"col-12 border border-1 p-3 my-5\" >\r\n        < ErrorBoundary >\r\n          <DataDisplay\r\n            players={players}\r\n            scoreState={scoreState}\r\n            whatsHappening={whatsHappening}\r\n            devMode={devMode} toggleDevMode={toggleDevMode}\r\n          >\r\n            <p>'Needed to win' is set to 2 when in dev mode</p>\r\n            <p>Vying for place: {vyingForPlace}</p>\r\n          </DataDisplay>\r\n        </ErrorBoundary>\r\n\r\n      </div>\r\n    </div>\r\n  </div >\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// <> Import my components\r\nimport App from './App';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\n\r\n// <> Stylesheets\r\nimport './css/bootstrap.css';\r\nimport './css/shape-size-font.css';\r\nimport './css/color-dark.css';\r\nimport './css/animation.css';\r\nimport { phaseDefinition } from './dataStructures';\r\n\r\nconst categoryList = [\r\n  { key: \"00\", queryTag: \"none\", title: \"Select a category\", cssClass: \"blackandwhite\" },\r\n  { key: \"01\", queryTag: \"food_and_drink\", title: \"Food & Drink\", cssClass: \"cat-food\" },\r\n  { key: \"05\", queryTag: \"sport_and_leisure\", title: \"Sport & Leisure\", cssClass: \"cat-sport\" },\r\n  { key: \"08\", queryTag: \"science\", title: \"Science\", cssClass: \"cat-science\" },\r\n  { key: \"04\", queryTag: \"history\", title: \"History\", cssClass: \"cat-history\" },\r\n  { key: \"02\", queryTag: \"geography\", title: \"Geography\", cssClass: \"cat-geography\" },\r\n  { key: \"06\", queryTag: \"movies\", title: \"Film & TV\", cssClass: \"cat-movies\" },\r\n  { key: \"07\", queryTag: \"music\", title: \"Music\", cssClass: \"cat-music\" },\r\n  { key: \"03\", queryTag: \"general_knowledge\", title: \"General Knowledge\", cssClass: \"cat-general\" },\r\n]\r\n\r\nconst neededToWin = categoryList.length - 1;\r\n// console.log(`Needed to win: ${neededToWin}`);\r\n\r\nconst phases:phaseDefinition[] = [\r\n  { key: \"00\", title: \"Welcome\", index: 1 },\r\n  { key: \"02\", title: \"Select\", index: 2 },\r\n  { key: \"04\", title: \"Question\", index: 4 },\r\n  { key: \"06\", title: \"Answer\", index: 6 },\r\n  { key: \"08\", title: \"Score\", index: 8 },\r\n  { key: \"10\", title: \"End\", index: 10 }\r\n]\r\n\r\n// <> Do the thing\r\nconsole.log(`Beginning rendering of Trivial Endeavor`);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary>\r\n      <App categoryList={categoryList} neededToWin={neededToWin} phases={phases} />\r\n    </ErrorBoundary>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);","module.exports = __webpack_public_path__ + \"static/media/trivialEndeavorLogo0.1c763c09.svg\";"],"sourceRoot":""}